{"version":3,"sources":["race.js"],"names":["setRaceInterval","getReaceWrap","document","getElementById","getRace","rCtx","getContext","canvasWidth","width","canvasHeight","height","block","getColumns","getBody","body","score","getScore","speed","lvl","moveLeft","moveRight","directions","68","65","getRestartBtn","getPlayBtn","addBorders","fillStyle","fillRect","endGame","clearTimeout","font","textAlign","fillText","initCar","isCollision","classList","add","outputScore","clearRect","outputLvl","setScoreAndSpeed","setInterval","CarParts","col","row","this","draw","x","y","Car","car","carPosition","carDecoration","prototype","carCoords","drawCar","pcControllers","key","mobileControllers","target","contains","Bots","drawBots","botStep","moveBots","setCoordX","Math","floor","random","setMinAndMax","min","max","botsCreator","setBotCoords","outputBots","i","length","push","checkCollisions","getBotCoords","botX","botY","startGame","setTimeout","movement","addEventListener","e","direction","keyCode","style","display","remove","clearInterval"],"mappings":"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","sourcesContent":["/* get game wrap */\r\nvar getReaceWrap = document.getElementById('raceWrap');\r\n\r\n/* get canvas */\r\nvar getRace = document.getElementById('race');\r\nvar rCtx = getRace.getContext('2d');\r\n\r\n/* canvas size */\r\nvar canvasWidth = getRace.width;\r\nvar canvasHeight = getRace.height;\r\n\r\n/* size for one block. \r\nthrough this block we draw car and bot car, move the car, draw borders and indent*/\r\nvar block = 10;\r\n\r\n/* set cols and rows */\r\nvar getColumns = canvasWidth / block;\r\n\r\n/* get body for car movement */\r\nvar getBody = document.body;\r\n\r\n/* game score */\r\nvar score = 0;\r\n\r\n/* get game score and reset it */\r\nvar getScore = 0;\r\n\r\n/* game speed */\r\nvar speed = 20;\r\n\r\n/* game lvl */\r\nvar lvl = 1;\r\n\r\n/* in this var we set game speed, score and  lvl (function startGame) */\r\nvar setRaceInterval;\r\n\r\n/* mobile controls */\r\nvar moveLeft = document.getElementById('leftMove');\r\nvar moveRight = document.getElementById('rightMove');\r\n\r\n/* direction for movements */\r\nvar directions = {\r\n    68: 'right',\r\n    65: 'left',\r\n}\r\n\r\n/* restart / play  button */\r\nvar getRestartBtn = document.getElementById('restartRace');\r\nvar getPlayBtn = document.getElementById('startGame');\r\n\r\n\r\n/*  \r\n** GAME BORDERS\r\n*/\r\nfunction addBorders() {\r\n    rCtx.fillStyle = '#0770BB';\r\n\r\n    // borders by clockwise\r\n    rCtx.fillRect(0, 0, canvasWidth, block);\r\n    rCtx.fillRect(canvasWidth - block, 0, block, canvasHeight);\r\n    rCtx.fillRect(0, canvasHeight - block, canvasWidth, block);\r\n    rCtx.fillRect(0, 0, block, canvasHeight);\r\n}\r\naddBorders();\r\n\r\n\r\n/*  \r\n** END GAME\r\n*/\r\nfunction endGame() {\r\n    clearTimeout(setRaceInterval);\r\n    rCtx.font = '30px Montserrat';\r\n    rCtx.fillStyle = '#eee';\r\n    rCtx.textAlign = 'center';\r\n    rCtx.fillText('End Game', canvasWidth / 2, block * 10);\r\n    initCar.isCollision = true;\r\n    getRestartBtn.classList.add('show');\r\n}\r\n\r\n\r\n/*  \r\n**  SCORE\r\n*/\r\nfunction outputScore() {\r\n    rCtx.clearRect(block, block, canvasWidth - block * 2, block * 2);\r\n    rCtx.font = '15px Montserrat';\r\n    rCtx.fillStyle = '#EF9B0F';\r\n    rCtx.textAlign = 'left';\r\n    rCtx.fillText('score: ' + score, block + 5, block * 2.5);\r\n}\r\n\r\n\r\n/* \r\n** LVL\r\n*/\r\nfunction outputLvl() {\r\n    rCtx.clearRect(canvasWidth - block * 7, block, block * 5, block * 2.);\r\n    rCtx.font = '15px Montserrat';\r\n    rCtx.fillStyle = '#EF9B0F';\r\n    rCtx.textAlign = 'left';\r\n    rCtx.fillText('level: ' + lvl, canvasWidth - block * 7, block * 2.5)\r\n}\r\n\r\n\r\n/* \r\n** INCREASE SCORE AND CHANGE GAME SPEED\r\nspeed and lvl changes every 20 seconds\r\n*/\r\nfunction setScoreAndSpeed() {\r\n    var scoreInterval = setInterval(function () {\r\n        score += 5;\r\n        getScore += 5;\r\n        if (getScore >= 100) {\r\n            getScore = 0;\r\n            lvl++;\r\n            speed -= 2;\r\n            speed <= 2 ? speed = 2 : speed;\r\n            return speed;\r\n        }\r\n    }, 1000);\r\n}\r\n\r\n\r\n/* \r\n** CONSTRUCTOR CarParts (via this one we draw car)\r\n*/\r\nfunction CarParts(col, row) {\r\n    this.col = col;\r\n    this.row = row;\r\n\r\n    /* draw car */\r\n    this.draw = function () {\r\n        var x = this.col;\r\n        var y = this.row;\r\n        rCtx.fillRect(x, y, block * 3, block * 5);\r\n    }\r\n}\r\n\r\n\r\n/* \r\n** CONSTRUCTOR Car\r\n*/\r\nfunction Car() {\r\n\r\n    // set start position for car\r\n    this.x = canvasWidth / 2 - block;\r\n    this.y = canvasHeight - block * 8;\r\n\r\n    /* if collision happens (check function checkCollisions ) we change value to true \r\n    and ending game (check function endGame )\r\n    */\r\n    this.isCollision = false;\r\n\r\n    /* CREATE CAR VIA CONSTRUCTOR CarParts */\r\n    this.car = new CarParts(this.x, this.y, block * 3, block * 5);\r\n\r\n    /* GET CAR POSITION. chnage it when pressing controll buttons, coliision check. */\r\n    this.carPosition = function () {\r\n\r\n        // for setting new car position\r\n        var moveCar;\r\n\r\n        /* draw car when it change position */\r\n        rCtx.fillStyle = '#023560';\r\n        moveCar = new CarParts(this.x, this.y, block * 3, block * 5);\r\n        rCtx.fillRect(this.x, this.y, block * 3, block * 5);\r\n\r\n        // prototype for adding borders (just visual effect)\r\n        this.carDecoration();\r\n\r\n        // if car collided with a border\r\n        if (this.x > canvasWidth - block * 4 || this.x < block) {\r\n            this.isCollision = true;\r\n            endGame();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/* \r\n** RETURN COORDS FOR CHECKING COLIISION (check function checkCollisions) \r\n*/\r\nCar.prototype.carCoords = function () {\r\n    var carCoords = {\r\n        x: this.x,\r\n        y: this.y\r\n    };\r\n    return carCoords;\r\n}\r\n\r\n\r\n/*\r\n** CAR DECORATION \r\n*/\r\nCar.prototype.carDecoration = function () {\r\n    // car decoration white block\r\n    rCtx.fillStyle = '#eee';\r\n    rCtx.fillRect(this.x + block, this.y + block * 2, block, block * 2);\r\n\r\n    // car decoration white borders by clockwise\r\n    rCtx.fillRect(this.x, this.y, block * 3, 1);\r\n    rCtx.fillRect(this.x + block * 3 - 1, this.y, 1, block * 5);\r\n    rCtx.fillRect(this.x, this.y + block * 5 - 1, block * 3, 1);\r\n    rCtx.fillRect(this.x, this.y, 1, block * 5);\r\n}\r\n\r\n\r\n/*\r\n** DRAW CAR \r\n*/\r\nCar.prototype.drawCar = function () {\r\n    rCtx.fillStyle = '#023560';\r\n    this.car.draw();\r\n    this.carDecoration();\r\n}\r\n\r\n\r\n/* \r\n** CAR CONTROLLERS (PC)\r\n*/\r\nCar.prototype.pcControllers = function (key) {\r\n\r\n    // movement left / right\r\n    if (key == 'left') {\r\n        this.x -= block;\r\n        rCtx.clearRect(this.x + block, this.y, block * 3, block * 5);\r\n    } else { }\r\n\r\n    if (key == 'right') {\r\n        this.x += block;\r\n        rCtx.clearRect(this.x - block, this.y, block * 3, block * 5);\r\n    } else { }\r\n\r\n    // check car position \r\n    this.carPosition();\r\n}\r\n\r\n\r\n/* \r\n** CAR CONTROLLERS (MOBILE)\r\n*/\r\nCar.prototype.mobileControllers = function (target) {\r\n    if (target.classList.contains('move-left')) {\r\n        this.x -= block;\r\n        rCtx.clearRect(this.x + block, this.y, block * 3, block * 5);\r\n    } else { }\r\n\r\n    if (target.classList.contains('move-right')) {\r\n        this.x += block;\r\n        rCtx.clearRect(this.x - block, this.y, block * 3, block * 5);\r\n    } else { }\r\n\r\n    // check car position\r\n    this.carPosition();\r\n}\r\n\r\n\r\n/* \r\n** INIT CONSTRUCTOR Car \r\n*/\r\nvar initCar = new Car();\r\ninitCar.drawCar();\r\n\r\n\r\n/* \r\n** CONSTRUCTOR Bots \r\n*/\r\nfunction Bots(x, y) {\r\n\r\n    // x and y coords\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    // speed for y\r\n    this.speed = 1;\r\n\r\n    /* DRAW BOT */\r\n    this.drawBots = function () {\r\n\r\n        // bot car body\r\n        rCtx.fillStyle = '#333';\r\n        rCtx.fillRect(this.x, this.y, block * 3, block * 5);\r\n\r\n        // bot decoration (orange block)\r\n        rCtx.fillStyle = '#EF9B0F';\r\n        rCtx.fillRect(this.x + block, this.y + block * 2, block, block * 2);\r\n\r\n        // bot decoration (white borders)\r\n        rCtx.fillRect(this.x, this.y, block * 3, 1);\r\n        rCtx.fillRect(this.x + block * 3 - 1, this.y, 1, block * 5);\r\n        rCtx.fillRect(this.x, this.y + block * 5 - 1, block * 3, 1);\r\n        rCtx.fillRect(this.x, this.y, 1, block * 5);\r\n    }\r\n\r\n\r\n    /* RETURN BOT STEP FOR CHECKING COLLISIONS (check function checkCollisions)*/\r\n    this.botStep = function () {\r\n        var coords = {\r\n            x: this.x,\r\n            y: this.y\r\n        }\r\n        return coords;\r\n    }\r\n\r\n\r\n    /* BOT MOVEMENT */\r\n    this.moveBots = function () {\r\n\r\n        rCtx.clearRect(this.x, this.y, block * 3, block * 5);\r\n        this.y += this.speed;\r\n\r\n        // repeat animation when bot goes outside game border\r\n        if (this.y > canvasHeight) {\r\n\r\n            // setting y coords\r\n            this.y = block * 2;\r\n\r\n            /* setting x coords. Generating random number between 1 and 16 and multiply it  on 10.\r\n             because canvas width is 200 - 20 (borders from each side) available canvas width is 180. \r\n             So 160(max random number) + 20(bot width) = 180. \r\n             So now we sure that bot position will be correct  (from 10 to 160)  */\r\n            var setCoordX = Math.floor(Math.random() * (getColumns - 4)) + 1;\r\n            this.x = setCoordX * block;\r\n        }\r\n        this.drawBots();\r\n    }\r\n}\r\n\r\n\r\n/* \r\n** GENERATED NUMBERS BETWEEN MIN AND MAX\r\n*/\r\nfunction setMinAndMax(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n\r\n// array for creating bots\r\nvar botsCreator = [];\r\n\r\n// array with coords for each bot\r\nvar setBotCoords = [\r\n    setMinAndMax(-10, -10),\r\n    setMinAndMax(2, 3),\r\n    setMinAndMax(14, 15)\r\n];\r\n\r\n// push bot to botsCreator array\r\nfunction outputBots() {\r\n    for (var i = 0; i < setBotCoords.length; i++) {\r\n        var x = Math.floor(Math.random() * (getColumns - 4)) + 1;\r\n        botsCreator.push(new Bots(x * block, setBotCoords[i] * 10, block * 3, block * 5));\r\n    }\r\n}\r\n\r\n\r\n/* \r\n** BOT MOVEMENT \r\n    (we can use methods from bot constructor because we \r\n    push new Bot Object for creating new bots )\r\n*/\r\nfunction moveBots() {\r\n    for (var i = 0; i < botsCreator.length; i++) {\r\n        botsCreator[i].moveBots();\r\n    }\r\n    // prevent destroy border by bot when they rich bottom\r\n    addBorders();\r\n}\r\n\r\n\r\n/* \r\n** CHEK FOR COLLISIONS\r\n*/\r\nfunction checkCollisions() {\r\n    /* car coords from CONSTRUCTOR Car.\r\n    type car.x for getting car X coords  */\r\n\r\n    var car = initCar.carCoords();\r\n    // array fro bot coords\r\n    var getBotCoords = [];\r\n\r\n    /* get bot coords (dynamic) */\r\n    for (var i = 0; i < setBotCoords.length; i++) {\r\n        getBotCoords.push(botsCreator[i].botStep());\r\n    }\r\n\r\n    /* get bot coords */\r\n    for (var key in getBotCoords) {\r\n        // coord X\r\n        var botX = getBotCoords[key].x;\r\n        // coord Y\r\n        var botY = getBotCoords[key].y;\r\n\r\n        /* if boot in diapasone check coord botX and car.x\r\n            Why 27 and 37\r\n                canvas height = 400;\r\n                car position = 320 from top\r\n                bot length = 50;\r\n\r\n            So: 270 + 50 = 320\r\n            So: 320 + 50 = 370\r\n\r\n            Checking will be strictly in needed coords    \r\n        */\r\n        if (botY >= block * 27 && botY <= block * 37) {\r\n\r\n            // if direct collision\r\n            if (botX == car.x) {\r\n                endGame();\r\n\r\n                // cheking left part of the car \r\n            } else if (botX + block * 2 == car.x) {\r\n                endGame();\r\n            } else if (botX + block == car.x) {\r\n                endGame();\r\n\r\n                // cheking right part of the car \r\n            } else if (botX - block * 2 == car.x) {\r\n                endGame();\r\n            } else if (botX - block == car.x) {\r\n                endGame();\r\n            } else { }\r\n        }\r\n        else { }\r\n    }\r\n}\r\n\r\n\r\n/* \r\n** CAR DRIVING BUTTONS (PC)\r\n*/\r\ngetBody.addEventListener('keydown', function (e) {\r\n    var direction = directions[e.keyCode];\r\n    if (initCar.isCollision == false && !getReaceWrap.classList.contains('not-active')) {\r\n        initCar.pcControllers(direction);\r\n    } else {\r\n        return false;\r\n    }\r\n});\r\n\r\n\r\n/* \r\n** CAR DRIVING BUTTONS (MOBILE)\r\n*/\r\nfunction mobileControllers(target) {\r\n    if (initCar.isCollision == false && !getReaceWrap.classList.contains('not-active')) {\r\n        initCar.mobileControllers(target);\r\n    } else {\r\n        return;\r\n    }\r\n}\r\n\r\nmoveLeft.addEventListener('click', function (e) {\r\n    mobileControllers(e.target);\r\n});\r\n\r\nmoveRight.addEventListener('click', function (e) {\r\n    mobileControllers(e.target);\r\n});\r\n\r\n\r\n/* \r\n** INIT GAME via nested setTimeout;\r\n*/\r\nfunction startGame() {\r\n    setRaceInterval = setTimeout(function movement() {\r\n        setRaceInterval = setTimeout(movement, speed);\r\n        moveBots();\r\n        checkCollisions();\r\n        outputScore();\r\n        outputLvl();\r\n    }, speed);\r\n}\r\n\r\n\r\n/* \r\n** PLAY GAME BUTTON\r\n*/\r\ngetPlayBtn.addEventListener('click', function () {\r\n    outputBots();\r\n    outputScore();\r\n    outputLvl();\r\n    setScoreAndSpeed()\r\n    startGame()\r\n    this.style.display = 'none';\r\n    getReaceWrap.classList.remove('not-active');\r\n});\r\n\r\n\r\n/* \r\n** RESTART GAME BUTTON\r\n*/\r\ngetRestartBtn.addEventListener('click', function () {\r\n    rCtx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n    initCar = new Car();\r\n    initCar.drawCar();\r\n\r\n    botsCreator = [];\r\n    setBotCoords = [];\r\n    setBotCoords = [setMinAndMax(-10, -10), setMinAndMax(2, 3), setMinAndMax(14, 15)];\r\n    outputBots();\r\n\r\n    score = 0;\r\n    speed = 20;\r\n    getScore = 0;\r\n    lvl = 1;\r\n\r\n    clearInterval(setRaceInterval);\r\n    startGame();\r\n\r\n    this.classList.remove('show');\r\n});"],"file":"race.js"}